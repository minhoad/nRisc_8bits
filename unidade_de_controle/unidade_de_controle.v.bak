module unidade_de_controle(Jump, WE, ULASrc, ULAOp, BEQ, RegSrc, Reset, PCWrite, RegWrite);
	input Reset;
	input [2:0] ULAOp;
	output reg WE, ULASrc, BEQ, RegSrc, PcWrite, Jump, RegWrite;
	
	always @(*)
		begin 
			case(ULAOp)
			
			3'b000: // LOAD
				begin 
					Jump <= 0;
					WE <= 0;
					ULASrc <= 1;
					BEQ <= 0;
					RegSrc <= 1;
					RegWrite <= 1;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b001: // LA
				begin 
					Jump <= 0;
					WE <= 0;
					ULASrc <= 1;
					BEQ <= 0;
					RegSrc <= 1; 
					RegWrite <= 1;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b010: // STORE
				begin 
					Jump <= 0;
					WE <= 1;
					ULASrc <= 1;
					BEQ <= 0;
					RegSrc <= 1; // X
					RegWrite <= 0;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b011: // ADD
				begin 
					Jump <= 0;
					WE <= 0;
					ULASrc <= 0;
					BEQ <= 0;
					RegSrc <= 0; 
					RegWrite <= 1;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b100: // ADDI
				begin 
					Jump <= 0;
					WE <= 0;
					ULASrc <= 1;
					BEQ <= 0;
					RegSrc <= 0; 
					RegWrite <= 1;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b101: // BEQ
				begin 
					Jump <= 0;
					WE <= 0;
					ULASrc <= 0; // X
					BEQ <= 1;
					RegSrc <= 0; // X
					RegWrite <= 0;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b110: // J
				begin 
					Jump <= 1;
					WE <= 0;
					ULASrc <= 0; // X
					BEQ <= 1;
					RegSrc <= 0; // X
					RegWrite <= 0;
					PCWrite <= 1;
					Reset <= 0;
				end
			3'b111: // HALT
				begin 
					Jump <= 0;
					WE <= 0;
					ULASrc <= 0; // X
					BEQ <= 0;
					RegSrc <= 0; 
					RegWrite <= 0;
					PCWrite <= 0;
					Reset <= 0;
				end
			endcase
		end
		
endmodule
